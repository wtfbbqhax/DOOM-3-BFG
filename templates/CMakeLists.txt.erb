%if @generate.project_boilerplate
cmake_minimum_required ( VERSION 2.8.11 )
project ( <%= @project.name %><% if @project.language == "CXX" %> CXX<% elsif @project.language == "C" %> C<% end %> )
%end
%if !@project.sources.empty?
%if @generate.platform_boilerplate

if ( APPLE )
    set ( CMAKE_MACOSX_RPATH OFF )
    set (
%if @project.language == "CXX"
        CMAKE_SHARED_LINKER_FLAGS
        "${CMAKE_SHARED_LINKER_FLAGS} -undefined dynamic_lookup"
%elsif @project.language == "C"
        CMAKE_MODULE_LINKER_FLAGS
        "${CMAKE_MODULE_LINKER_FLAGS} -undefined dynamic_lookup"
%end
    )
endif ( APPLE )
%end

include ( FindPkgConfig )
pkg_search_module ( SNORT3 REQUIRED snort>=3 )

add_library (
%if @project.language == "CXX"
    <%= @project.libname %> SHARED
%elsif @project.language == "C"
    <%= @project.libname %> MODULE
%end
%for source in @project.sources
    <%= source %>
%end
)
%if @project.language == "CXX"

set ( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11" )
%end
%if @project.language == "C"

set ( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99" )
%end

target_include_directories (
    <%= @project.libname %> PUBLIC
    ${SNORT3_INCLUDE_DIRS}
)

install (
    TARGETS <%= @project.libname %>
    LIBRARY DESTINATION "lib/${CMAKE_PROJECT_NAME}/<%= @project.dirname %>"
)
%end
%if !@project.scripts.empty?

install (
    FILES<% for script in @project.scripts %> <%= script %><% end %>
    DESTINATION "lib/${CMAKE_PROJECT_NAME}/<%= @project.dirname %>"
)
%end
